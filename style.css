/* This is a Comment in CSS*/
/*Here we are using external CSS*/
html{
    font-size: 14px;
}
body{
    background-color: thistle;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}
h2{
    text-align: center;
}
#main > p{ /*This is an example of child Selector*/
    color:rgb(58, 0, 113);
    font-weight: 500;
}
#table th{/*This is an example of descendant selector*/
    background-color: rgb(244, 244, 117);
    font-size: large;
    
}
/*pseudo selector*/
a:visited{ /*Link that is visited*/
    color: rgb(2, 4, 117);
}
a:link{ /*link that is not visited*/
    color: purple
}
a:active{/*css applied when a link is presses*/
    color: rgb(233, 233, 203);
}
a:hover{/* css applied when cursor is moved over the text*/
    background-color: rgb(115, 65, 207);
}
#table td{
    background-color: rgb(145, 227, 227);
}
ol > li:first-child{ 
    background-color: yellow;
}
label{
    font-weight: bold;
}
/*Height of an element includes only the content i.e not the padding and border..
when we do box-sizing:border-box we make the height of an element = content + padding + border of the element*/
#form{
    font-size: large;
    background-color: white;
    border: 2px solid black;
    padding: 2%;
    margin: 2%;
    /* height: 400px;
    box-sizing: border-box; */
}
#box{
    border: 2px solid blueviolet;
    background-color: bisque;
    line-height: 2;/*Line height refers to the vertical space between lines of text. It determines the spacing between baselines of consecutive text lines*/
}
dt{
    /* font-size: 500px; */
    color: hsla(240, 100%, 30%, 0.914);
    text-transform: uppercase;
    text-overflow:ellipsis;
    overflow: hidden;
}
/*The specificity order of selectors is: inline > id > class/attribute selector > element > universal*/
/* Attribute selector */
[data-x=a]{
    background-color: rgb(140, 192, 238) !important;
}
.myBox{
    padding: 32px;
    background-color: rgb(135, 227, 227);
    width: 80vmin;
    font-size: larger;
    font-weight: 500;
    border: 2px solid navy;
    box-shadow: 15px 15px 5px rgb(8, 91, 255);
}
/* While both can visually appear similar, outlines differ from borders in a few ways:
Position: Outlines don't take up space; they're drawn around the element, outside of any border.
Offset: Using the outline-offset property, you can set the space between an outline and the edge or border of an element.
Width: Borders can have varying widths on different sides, outlines have a uniform width.
Rounded Corners: Borders can have rounded corners using border-radius, while outlines generally cannot. */
h1{
    text-shadow: 5px 5px 2px grey;
    outline: 2px dashed rgb(70, 5, 70);
    border: 2px dashed rgb(168, 29, 210);
    outline-offset: 2px;
}
dl ul li{
    list-style: devanagari;
    background-color: wheat;
    list-style-position: inside;
    list-style-type: "ðŸ˜Ž";
    list-style-image: url("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQtXUbiUyNX8hFGfXIyndbUfq0Y88AB4pqsQQ&s");
    list-style: disc inside url("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQtXUbiUyNX8hFGfXIyndbUfq0Y88AB4pqsQQ&s");
}
.box1{
    background-color: aqua;
    /* position: absolute;
    bottom: 0px;this will look for the nearset positional ancestor and stick to it at 100px from top of that element */
}
.box2{
    background-color: azure;
    /* position: relative;
    top: -56px;
    left: 34px;
    z-index: 1; */
}
.box3{
    background-color: antiquewhite;
    /* position: absolute;
    top: 56px; */
    position: sticky;
    top: 0px;
}
.box4{
    background-color: purple;
    position: fixed;/*even if i scroll page up or down its position is fixed*/
    top: 0px;
    z-index: -1;
    color: whitesmoke;
    font-size: larger;
    font-weight: 500;
}

.Box{
    margin: 3px;
    padding: 3px;
    height: 133px;
    width: 80vw;
    border: 2px solid black;
}
.parent{
    border: 3px solid purple;
    padding: 43px;
    margin: 34px;
    height: 1155px;
    /* position: relative; */
}
/*Common use cases:
fixed: Global navigation bars, chat widgets, "back to top" buttons
sticky: Section headers in long lists, category headers in tables, sidebar navigation that stays within a container*/
#media{
    background-color: skyblue;
}
@media only screen and (max-width: 485px){
    #media{
        background-color: Yellow;
    }
}
.boxes{
    width: 344px;
    height: 344px;
    background-color: rgb(0, 213, 255);
    margin: 2px;
    display: block;
}
#mainBox{
    display: flex;
}
@media only screen and (max-width:485px){
    #mainBox{
        flex-direction: column;
    }
}
@media only screen and (orientation:landscape){
    #mainBox{
        border: 2px solid navy;
    }
}
/*
The :first-child selector works like this:
It selects the element if it is the first child of its parent.
It does not matter whether the element has a class or IDâ€”those identifiers are used for selection, but :first-child checks the element's position within its parent.
the below code thus doesn't get applied to the div of class .rects
.rects:first-child{
    background-color: red;
}
Now if i write the the code below...
here the immediate parent of .rect div is .rects div..so it make it's background-color of first .rect child to be red*/
/*pseudo selectors*/
.rect:first-child{
    background-color: red;
}
.rect:first-child:first-letter{
    color: rgb(16, 5, 120);
}
.rect::first-line{
    background-color: yellow;
}
.rects *{
    border: 2px solid black;
    margin: 5px;
}
/*Attribute selector*/

.rect:nth-child(odd),.rect:nth-last-child(1), [data-top="primary"]{
    padding-top: 10px;
}
/* ::before/::after Helps to introduce elements dynamically before a respective HTML tag*/
.rects::before{
    content: "Rectangles:";
    margin: 5px;
    border: 2px solid black;
}
.rects::after{
    content: "Rectangles Ended";
    margin: 5px;
    border: 2px solid black;
}
/* selection pseudo selector*/
.rect::selection{
    color: darkgreen;
}
.rect:first-child:first-letter{
    color: rgb(16, 5, 120);
}

/*way1 to use the grid*/
/* 
#gridContainer{
    border: 2px solid black;
    display: grid;
    grid-template-columns: [first] 120px [second] 120px [third] 120px [fourth];/*it tells how many columns needs to be formed
    grid-template-rows: 100px 100px 100px;it tells how many rows needs to be formed
    grid-auto-flow: row;
    grid-auto-rows: 100px;This ensures consistent row heights 
    grid-auto-flow: column;
    grid-auto-columns: 120px;
    gap: 2px;
}
.grid{
    border: 2px solid red;
    height: 100%;
    width: 100%;
}
.item4{
    grid-row: 2/4;
    grid-column: second/third;
/* } 
/*Way 2 to use the grid:*/
#gridContainer{
    border: 2px solid black;
    display: grid;
    grid-template-areas: "nav nav nav nav"
                         "main main empty side"
                         "foot foot foot foot"
                         ;
}
.grid{
    border: 2px solid white;
    height: 55px;
}
.item1{
    grid-area: nav;
    background-color: purple;
}
.item2{
    grid-area: main;
    background-color: skyblue;
}
.item3{
    grid-area: empty;
    background-color: aqua;
}
.item4{
    grid-area: side;
    background-color: yellow;
}
.item5{
    grid-area: foot;
    background-color: orangered;
}